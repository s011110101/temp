import java.time.Year;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import static java.util.Collections.sort;

public class Tester {
    public static <V extends Comparable<V>> V min(V a, V b){
        if (a.compareTo(b)<0){
            return a;
        }
        return b;
    }
    public static <T extends Comparable<T>> int upOrDownOrNeither(T t1, T t2, T t3, T t4){
        List<T> unsort = List.of(t1,t2,t3,t4);
        // need to be mutable
        List<T> asc = new ArrayList<T>();
        for (int i=0; i<4; i++){
            asc.add(unsort.get(i));
        }
        List<T> des = new ArrayList<>(asc);
        Collections.sort(asc);
        if (unsort.equals(asc)){
            return -1;
        }
        Collections.sort(des,Collections.reverseOrder());
        if (unsort.equals(des)){
            return 1;
        }
        return 0;
    }
    public static <A> Pair split(List<A> list){
        List<A> firstHalf = new ArrayList<A>();
        List<A> secondHalf = new ArrayList<A>();
        for (int i=0; i<list.size()/2; i++){
            firstHalf.add(list.get(i));
        }
        for (int i=list.size()-1; i>list.size()/2; i--){
            secondHalf.add(list.get(i));
        }
        return new Pair(firstHalf,secondHalf);
    }
    public static <A> boolean isPal(List<A> list){
        //if (list.size()%2==1){
            //remove the one in the middle
            //list.remove(list.size()/(int)2+1);
        //}
        Pair tmp = split(list);
        if (tmp.fst().equals(tmp.scd())){
            return true;
        }
        return false;
    }
    public static <U extends Comparable <U>> Pair pivot(List<U> a, U piv){
        List<U> left = new ArrayList<U>();
        List<U> right = new ArrayList<U>();
        for (int i=0; i < a.size(); i++){
            if (a.get(i).compareTo(piv)>0){
                right.add(a.get(i));
            }
            else{
                left.add(a.get(i));
            }
        }
        return new Pair(left,right);
    }
    public static void main(String[] args) {
        List<Book> books = List.of(
                new Book("A", 304),
                new Book("Z", 203),
                new Book("M", 495),
                new Book("B", 35),
                new Book("G", 107));

        Pair<List<Book>> ans = Tester.pivot(books,
                new Book("X", 150));

        System.out.println(ans);
    }
}
